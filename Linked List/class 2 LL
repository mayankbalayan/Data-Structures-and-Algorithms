#include<iostream>
using namespace std;
class Node{
public:
int data;
Node* prev;
Node* next;
Node(){
    this -> prev = NULL;
    this -> next = NULL;
}
Node(int data){
    this -> data = data;
    this -> prev = NULL;
    this -> next = NULL;
}
};
void print(Node*&head){
    Node * temp = head;
    while(temp != NULL){
        cout << temp -> data << " ";
        temp = temp -> next;
    }
}
int findlength(Node*&head){
    Node* temp = head;
    int len = 0;
    while(temp!=NULL){
     len++;
     temp = temp -> next;
    }
    return len;
}
void insertathead(Node*&head, Node*&tail, int data){
   // ll is empty 
   if(head == NULL){
    Node * newNode = new Node(data);
     head = newNode;
     tail = newNode;
   }
   else{
   // ll is not empty 
   Node * newNode = new Node(data);
   head -> prev = newNode;
   newNode -> next = head;
   head = newNode;
   }
}
void insertattail(Node*&head, Node*&tail, int data){
    // ll is empty 
    if(head == NULL){
        Node * newNode = new Node(data);
         head = newNode;
         tail = newNode;
       }
       else{
        // ll is not empty
        Node* newNode = new Node(data);
        tail -> next = newNode;
        newNode -> prev = tail;
        tail = newNode;
       }
}
void insertatmiddle(Node*&head, Node*&tail, int data,int position){
    int len = findlength(head);

     if(position==1){
        insertathead(head,tail,data);
        return;
       }
       else if(position>len){
        insertattail(head,tail,data);
        return;
       }
       else{
        // insert at any position 
        Node* newNode = new Node(data);
    // step 1 set prevnode and currnode
        Node* prevNode = NULL;
        Node* currNode = head;
    // find the prev node and currnode between which insertion take place
        while(position != 1) {
            position--;
            prevNode = currNode;
            currNode = currNode->next;
        }
        // pointers update link the new node with prevnode and currnode 
        prevNode -> next = newNode;
        newNode -> prev = prevNode;
        currNode -> prev = newNode;
        newNode -> next = currNode;
       }
}
void deletenode(Node*&head,Node*&tail,int position){
    if(head == NULL){
        cout << "no deletion possible ll is empty" << endl;
        return;
    }
    if(head==tail){
        // WHEN THERE IS ONLY SINGLE  NODE 
        Node*temp = head;
        delete temp;
        head = NULL;
        tail = NULL;
       return;
    }
    if(position == 1){
       // delete from head
       Node* temp = head;
       head = temp -> next;
       head -> prev = NULL;
       temp -> next = NULL;
       delete temp;
       return;
    }
    int length = findlength(head);
    if(position > length){
      // delete from tail
      Node*prevNode = tail->prev;
      prevNode -> next = NULL;
      tail -> prev = NULL;
      delete tail;
      tail = prevNode;
    }
    else{
        // delete from middle
        //step1: set prevNode/currNode/nextNode
    Node* prevNode = NULL;
    Node* currNode = head;
    while(position != 1) {
      position--;
      prevNode = currNode;
      currNode = currNode->next;
    }
    Node* NextNode = currNode->next;
    prevNode -> next = NextNode;
    NextNode -> prev = currNode -> prev;
    currNode -> next = NULL;
    currNode -> prev = NULL;
    delete currNode;
    }
}

int main(){
 Node * head = NULL;
 Node * tail = NULL;
 insertathead(head,tail,50);
 insertathead(head,tail,40);
 insertathead(head,tail,30);
 insertathead(head,tail,20); 
 insertathead(head,tail,10);
 insertattail(head,tail,60);
 insertatmiddle(head,tail,35,4);
print(head);
cout << endl;
deletenode(head,tail,1);
print(head);


 return 0;
}
