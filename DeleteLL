// deleting the linked list according to the postion
#include <iostream>
using namespace std;
class Node {
    public:
    int data;
    Node* next;

    Node() {
            this->data = 0;
            this->next = NULL;
    }
    Node(int data) {
            this->data = data;
            this->next = NULL;
    }
int findLength(Node* &head ) {
    int len = 0;
    Node* temp = head;
    while(temp != NULL) {
            temp = temp->next;
            len++;
    }
    return len;
}
void print(Node* head) {

    Node* temp = head;                      //while(head!=NULL){
    while(temp != NULL) {                   // cout << head -> data << " "'
            cout << temp->data << " ";      // head = head->next;
            temp = temp->next;              // } cout << endl;}
    }
}
void deletenode(Node *head , Node *tail, int position){
    if(head == NULL){
        cout << "linklist is empty so no delation" << endl;
        return;
    }
    if(head==tail){
        // when there is a single element in the LL
        Node*temp = head;
        delete head;
        head = NULL;
        tail = NULL;
        return;
    }
    int len = findLength(head);
    if(position==1){
        // delete from head

        Node * temp = head;
        head = temp -> next;
        temp -> next = NULL;
        delete temp;
    }
    else if(position == len){
        // delete from tail
        // last node ko delete
        Node*prev = head;
        // find node before tail
        while(prev->next != tail){
            prev = prev -> next;
        }
        // PREV K NEXT KO NULL
        prev -> next = NULL;
        // DELETE TAIL
        delete tail;
        // tail ko update 
        tail = prev;
    }
    else{
        // middle m kissi node ko delete krna h 
        // step 1 set prev/curr pointers
        Node*prev = NULL;
        Node*curr = head;
        while(position!=1){
            position--;
            prev = curr;
            curr = curr -> next;
        }
        // step 2 prev k next ko curr k next pe point krdo
        prev -> next = curr -> next;
        // step 3 curr k next ko null krdo
        curr -> next = NULL;
        // step 4 delete curr
        delete curr;
    }
}

int main() {
// Manually creating nodes
    Node* first = new Node(10);
    Node* second = new Node(20);
    Node* third = new Node(30);
    Node* fourth = new Node(40);
    Node* fifth = new Node(50);

    // Linking nodes together: 10 -> 20 -> 30 -> 40 -> 50
    first->next = second;
    second->next = third;
    third->next = fourth;
    fourth->next = fifth;

    // Set head and tail
    Node* head = first;
    Node* tail = fifth;
// print brfore deletion
print(head);
// delete 
deletenode(head,tail,3);
// print after delete 
print(head);
return 0;
}



// leetcode question https://leetcode.com/problems/delete-node-in-a-linked-list/

solution 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        // Copy the value from the next node to the current node
       node->val = node->next->val;
        // Skip the next node
        node->next = node->next->next;
    }
};
