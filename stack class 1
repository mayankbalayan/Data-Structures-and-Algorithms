// class 1 of stack 

#include<iostream>
#include<stack>
using namespace std;

// insert in a sorted array 
void insertsorted(stack<int>&st, int element){
    if(st.empty() || element > st.top()){
        st.push(element);
        return;
    }
    // 1 case solve krna h 
    int temp = st.top();
    st.pop();

    // recursion smbhle ga aage 
    insertsorted(st,element);

    // backtracking 
    st.push(temp);
}

// sort a stack
void sort(stack<int>&st){
    if(st.empty()){
        return;
    }
    // 1 case
    int temp = st.top();
    st.pop();
    // recursion 
    sort(st);

    // backtrack
    insertsorted(st,temp);
}

// insert at bottom
void insert(stack<int>&st,int &element){
    // base case
    if(st.empty()){
        st.push(element);
        return;
    }
    // 1 case solve krlo 
    int temp = st.top();
    st.pop();
    // recursion 
    insert(st,element);

    // backtracking
    st.push(temp);
}

// revserse a stack
void reverse(stack<int>&st){
    // base case
    if(st.empty()){
        return ;
    }
    // case 1 solve
    int temp = st.top();
    st.pop();

    // recursion
    reverse(st);

    //backtracking 
    insert(st,temp);

}

// middle element of the stack 
// void solve(stack<int>&st, int pos, int &ans){
// // base case
// if (pos==1){
//     ans = st.top();
//     return;
// }
// // 1 case haam solve krege
// pos--;
// int temp = st.top();
// st.pop();
// //recursion 
// solve(st,pos,ans);

// // backtracking 
// st.push(temp);
// }
// int getmiddleelement(stack<int>st){
//     int size = st.size();
// if(st.empty()){
//     return -1;
// }
// else{
//     // stack is not empty
//     // odd case
//     int pos = 0;
//     if(size%2==1){
//         pos = size/2+1;
//     }
//     else{
//         // even case
//         pos = size/2;
//     }
//     int ans = -1;
//     solve(st,pos,ans);
//     return ans;
// }
// }
int main(){
    // basic stack in class starting 
//     cout << "hello" << endl;
//  string str = "hellomayank";
//  stack<char>st;
//  for(int i =0; i<str.length(); i++){
//     char ch = str[i];
//     st.push(ch);
//  }
//  cout << endl;
//  while(!st.empty()){
//    cout << st.top();
//    st.pop();
//  }
 
// find middle of the stack 
stack<int> st;

st.push(9);
st.push(200);
st.push(90);
st.push(40);
st.push(80);
st.push(10);
sort(st);
// int element = 39;
// insert(st,element);
// reverse(st);
// insertsorted(st,element);
while(!st.empty()){
    cout << st.top() << " ";
    st.pop();
}
// int mid = getmiddleelement(st);
// cout << "middle element " << mid << endl;
return 0;
}
