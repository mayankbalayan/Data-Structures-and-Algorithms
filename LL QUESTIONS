PRACTISE SET 
1 QUESTION ONE (REVERSE LINKED LIST)
Leetcode link :- https://leetcode.com/problems/reverse-linked-list/submissions/1655698398/
solution :- (leetcode solution)

class Solution {
public:
// reverse using recurion 
      ListNode* reverseusingrecursion(ListNode* prev, ListNode*curr){
        if(curr == NULL){
            return prev;
        }
        // ek case hmne solve kr liya h 
       ListNode*NextNode = curr -> next;
       curr -> next = prev;
       prev = curr;
       curr = NextNode;
       // baaki recusion smbhlega 
       return = reverseusingrecursion( prev,curr);
      }
    ListNode* reverseList(ListNode* head) {
    ListNode*prev = NULL;
    ListNode* curr = head;
    return reverseusingrecursion( prev,curr);


    // iterative way 
    // while(curr!=NULL){
    //     ListNode*NextNode = curr -> next;
    //     curr -> next = prev;
    //     prev = curr;
    //     curr = NextNode;
    // }
    //  return prev;

    }
};

2. 876. Middle of the Linked List
https://leetcode.com/problems/middle-of-the-linked-list/description/

class Solution {
public:
    int findlength(ListNode *head){
        int len =0;
        ListNode* temp = head;
        while(temp != NULL){
            len++;
            temp = temp -> next;
        }
        return len;
    }
    ListNode* middleNode(ListNode* head) {
        int n = findlength(head);
        int position = n/2+1;
        int currPos=1;
        ListNode*temp=head;
        while(currPos!=position){
            currPos++;
            temp = temp->next;
        }
        return temp;
    }
};

3
