PRACTISE SET 
1 QUESTION ONE (REVERSE LINKED LIST)
Leetcode link :- https://leetcode.com/problems/reverse-linked-list/submissions/1655698398/
solution :- (leetcode solution)

class Solution {
public:
// reverse using recurion 
      ListNode* reverseusingrecursion(ListNode* prev, ListNode*curr){
        if(curr == NULL){
            return prev;
        }
        // ek case hmne solve kr liya h 
       ListNode*NextNode = curr -> next;
       curr -> next = prev;
       prev = curr;
       curr = NextNode;
       // baaki recusion smbhlega 
       return = reverseusingrecursion( prev,curr);
      }
    ListNode* reverseList(ListNode* head) {
    ListNode*prev = NULL;
    ListNode* curr = head;
    return reverseusingrecursion( prev,curr);


    // iterative way 
    // while(curr!=NULL){
    //     ListNode*NextNode = curr -> next;
    //     curr -> next = prev;
    //     prev = curr;
    //     curr = NextNode;
    // }
    //  return prev;

    }
};

2. 876. Middle of the Linked List
https://leetcode.com/problems/middle-of-the-linked-list/description/

class Solution {
public:
    int findlength(ListNode *head){
        int len =0;
        ListNode* temp = head;
        while(temp != NULL){
            len++;
            temp = temp -> next;
        }
        return len;
    }
    ListNode* middleNode(ListNode* head) {
        int n = findlength(head);
        int position = n/2+1;
        int currPos=1;
        ListNode*temp=head;
        while(currPos!=position){
            currPos++;
            temp = temp->next;
        }
        return temp;
    }
};
by slow fast algo tortoise algo
 ListNode* middleNode(ListNode* head) {
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast && fast->next != NULL){
         slow= slow->next;
         fast = fast-> next->next;
        }
        return slow;
    }
};

3
234. Palindrome Linked List
https://leetcode.com/problems/palindrome-linked-list/description/
class Solution {
public:
  ListNode* reverseusingrecursion(ListNode* prev, ListNode*curr){
        if(curr == NULL){
            return prev;
        }
        // ek case hmne solve kr liya h 
       ListNode*NextNode = curr -> next;
       curr -> next = prev;
       prev = curr;
       curr = NextNode;
       // baaki recusion smbhlega 
       ListNode*recusionkaans = reverseusingrecursion( prev,curr);
       return recusionkaans;

      }
ListNode* middleNode(ListNode* head) {
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast->next != NULL){
            fast = fast-> next;
            if(fast->next != NULL){
                fast= fast->next;
         slow= slow->next;
            }
        }
        return slow;
}
    bool comparelist(ListNode*head,ListNode*head2){
        while(head!=NULL&& head2 != NULL){
            if(head->val!=head2->val){
                return false;
            }
            else{
                head=head->next;
                head2=head2->next;
            }
        }
        return true;
    }
    bool isPalindrome(ListNode* head) {
        // break into 2 parts
        ListNode*midNode=middleNode(head);
        ListNode*head2 = midNode->next;
        midNode -> next = NULL;
        // reverse second linklist 
        ListNode*prev = NULL;
        ListNode*curr = head2;
        head2=reverseusingrecursion(prev,curr);
    // compare both linked list
    bool ans = comparelist(head,head2);
    return ans;
    
    }
};
4
141. Linked List Cycle
https://leetcode.com/problems/linked-list-cycle/description/
class Solution {
public:
    bool hasCycle(ListNode *head) {
         ListNode *slow = head, *fast = head;
    while (fast && fast->next!=NULL) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
            return true;
    }
    return false;
    }
};

